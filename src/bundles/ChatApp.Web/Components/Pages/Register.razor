@using ChatApp.Web.Components.Layout
@using ChatApp.Web.Contracts

@page "/register"

@layout MainLayout

@inherits ComponentBase

@inject IUserService UserService

<section class="row">
    <div class="col">

        <h3>Create an account</h3>
        <form>
            <label for="register-username">Username</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user"></span>
                </div>
                <input class="form-control" type="text" placeholder="abergs" id="register-username" @bind="RegisterUsername" required>
            </div>

            <label for="displayName">Display name</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="text" placeholder="Anders Ã…berg" id="displayName" @bind="RegisterDisplayName">
            </div>
        </form>
        <div class="input-group">
            <button class="btn btn-primary" disabled="@(!RegisterFormValid())" @onclick="SignUp">Create account</button>
        </div>
    </div>
    <div class="col-2"></div>
    <div class="col">

        <h3>Sign in</h3>
        <form>
            <label for="login-username">Username</label>
            <div class="input-group">
                <div class="input-group-text">
                    <span class="fas fa-user">
                    </span>
                </div>
                <input class="form-control" type="text" placeholder="abergs" id="login-username" required @bind="LoginUsername">
            </div>
        </form>
        <div class="input-group">
            <button class="btn btn-primary" disabled="@(!LoginFormValid())" @onclick="Login">Sign in</button>
        </div>
    </div>
</section>

<section class="pt-5">
    <h1>Explanation: Passwordless login with FIDO2</h1>
    <p>
        In this scenario, WebAuthn is used as together with a username to securely authenticate the user. This scenario can still be considered MFA (although no password is used) since the Authenticator can verify the User.
        The flow is visualized in the figure below.
    </p>
    <img src="images/scenario2.png" alt="figure visualizing username and challenge sent together with assertion" />
    <p>In this flow the Relying Party should tell the Authenticator to do User Verification (set UserVerification to required) via Biometrics/pin, thus the authentication is MFA (Something the user has - the private key - and something the user knows/is - the PIN or biometrics). However in scenarios where security requirements are very low we we could discourage user verification to minimize the user interaction needed to sign in. If discouraged, only user presence will be checked (Any human is present at the device).</p>
</section>

@code {
    private bool WebAuthnSupported { get; set; } = true;

    private string RegisterUsername { get; set; } = "";
    private string? RegisterDisplayName { get; set; }

    private string LoginUsername { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        WebAuthnSupported = await UserService.IsWebAuthnSupportedAsync();
    }

    private bool RegisterFormValid() => !string.IsNullOrWhiteSpace(RegisterUsername);
    
    private async Task SignUp()
    {
        var username = RegisterUsername;
        var displayName = RegisterDisplayName;

        var result = await UserService.RegisterAsync(username, displayName);
        Console.WriteLine(result);
    }

    private bool LoginFormValid() => !string.IsNullOrWhiteSpace(LoginUsername);
    private async Task Login()
    {
        var result = await UserService.LoginAsync(LoginUsername);

        if (result.StartsWith("Bearer"))
        {
            Console.WriteLine($"Token: {result.Replace("Bearer ", "")}");
        }
        else
        {
        }
    }
}